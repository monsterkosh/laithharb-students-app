### Controller: 
Is something that accepts http request and sends back a response to the client

The logic asociated to manufacutring the response, is not housed insie the
controller, it is housed somewhere else.

The controller is only responsible for accepting HTTP request and sending back
a response.

A controller is going to house routes that are common. (ex. all /students)


### Decorators:
They identify what the thing that we are trying to create is.

### REQUEST OBJECTS
Extract information for the request

### DTO
Data transfer objects
Classes that define the type of data we are transfering

### PROVIDERS  (Service)
Contains all the logic that is going to send back the response
They way to manufacture the response we are going to be sending

nest g service student --no-spec
nest g service teacher --no-spec

### PIPES
A way to validate and transform data
transform: transform input data to the desired form
validation: evaluate input data and if valid, simply pass it through unchanged,
otherwise throw and exception when the data is incorrect

### MODULES
A way to really organize our components

nest g module student 
nest g module teacher

### MIDDLEWARE
Middle man between the Request of a Client and the Controller
Needed when we have a lot a repetive code. 
(Ex. if we have 5 routes validating uuids, we could validate the uuid in the 
middleware, if its not validated... dont even send it to the controller)
Another use if we need to make sure if the client is authorized to make that 
request, if he's logged in of if he had for example premium access.
Also used for handling errors.
And used also for sanitize our data, and inject data inside the request so
the controller can actually used. (Ex. if we are trying to log in through
a JWT, the middleware can parse that JWT, figure out the User is, and put 
that used in the request, so the Controller doesnt need to parse that data)

Its just a class that is injected into the module
